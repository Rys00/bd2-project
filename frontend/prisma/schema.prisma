datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ProductCategory {
  category_id Int    @id @default(autoincrement()) @map("category_id")
  name        String
}

model Product {
  product_id Int     @id @default(autoincrement()) @map("product_id")
  name       String
  price      Decimal
  cost       Decimal
  margin     Int
  active     Boolean
}

model ProductStock {
  stock_id     Int      @id @default(autoincrement())
  amount       Int
  last_updated DateTime @updatedAt
}

model Allergen {
  allergen_id Int    @id @default(autoincrement()) @map("allergen_id")
  name        String
}

model Order {
  order_id     Int      @id @default(autoincrement())
  date         DateTime
  sum          Decimal
  total_profit Decimal
}

model OrderPosition {
  position_id Int     @id @default(autoincrement())
  amount      Int
  profit      Decimal
  unit_price  Decimal
  value       Decimal
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime          @default(now()) @map("date_joined")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  // Custom
  passwordHash UserPasswordHash?

  //Django
  is_superuser Boolean
  is_staff     Boolean
  is_active    Boolean
  is_cashier   Boolean
  password     String

  @@map("bufet_cuser")
}

model UserPasswordHash {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id @map("user_id")
  hash   String

  @@map("js_user_password_hashes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("js_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("js_sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("js_verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
